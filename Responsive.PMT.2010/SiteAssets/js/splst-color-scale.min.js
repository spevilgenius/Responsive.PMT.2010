function SPLSTColorScale(n) {
    window.SPLST || (window.SPLST = {});
    n.ui.percentspinner || n.widget("ui.percentspinner", n.ui.spinner, {
        _format: function (n) {
            return n + "%"
        },
        _parse: function (n) {
            return parseInt(n)
        }
    });
    var t = navigator.appVersion.indexOf("Mac") !== -1,
        i = '<div class="splst-cs"><div class="splst-cs-disabled-cover" style="display: none;"><\/div><div id="colorScale" class="splst-cs-color-scale"><div class="splst-cs-hover-line"><\/div><\/div><div id="percentScale" class="splst-cs-percent-scale"><div class="splst-cs-line"><\/div><div class="splst-cs-divisions"><div class="splst-cs-division splst-cs-first-division"><\/div><div class="splst-cs-division"><\/div><div class="splst-cs-division"><\/div><div class="splst-cs-division"><\/div><div class="splst-cs-division"><\/div><div class="splst-cs-division"><\/div><div class="splst-cs-division"><\/div><div class="splst-cs-division"><\/div><div class="splst-cs-division"><\/div><div class="splst-cs-division"><\/div><div class="splst-cs-clear"><\/div><\/div><div class="splst-cs-labels"><div class="splst-cs-label" style="left: 0;">0%<\/div><div class="splst-cs-label" style="left: 10%;">10%<\/div><div class="splst-cs-label" style="left: 20%;">20%<\/div><div class="splst-cs-label" style="left: 30%;">30%<\/div><div class="splst-cs-label" style="left: 40%;">40%<\/div><div class="splst-cs-label" style="left: 50%;">50%<\/div><div class="splst-cs-label" style="left: 60%;">60%<\/div><div class="splst-cs-label" style="left: 70%;">70%<\/div><div class="splst-cs-label" style="left: 80%;">80%<\/div><div class="splst-cs-label" style="left: 90%;">90%<\/div><div class="splst-cs-label" style="left: 100%;">100%<\/div><div class="splst-cs-clear"><\/div><\/div><\/div><\/div>',
        r = '<div class="splst-cs-cptr-back dynamic"><\/div><div class="splst-cs-cptr-container dynamic"><div class="splst-cs-cptr"><div class="splst-cs-edit" style="background-image: url({0});" title="{1}"><\/div><div class="splst-cs-cp"><div class="splst-cs-cp-color"><input type="text" /><\/div><\/div><\/div><\/div>',
        u = '<div class="splst-cs-cptr-back static"><\/div><div class="splst-cs-cptr-container static"><div class="splst-cs-cptr"><div class="splst-cs-cp"><div class="splst-cs-cp-color"><input type="text" /><\/div><\/div><\/div><\/div>',
        f = '<div class="splst-cs-color-line"><\/div>',
        e = '<div class="splst-cs-cover"><\/div><div class="splst-cs-cptr-editor"><table cellpadding="5" cellspacing="0"><tr><td>{0}<\/td><td><input type="text" class="splst-cs-cptr-editor-input" /><\/td><\/tr><tr><td>{1}<\/td><td><div class="splst-cs-cp"><div class="splst-cs-cp-color"><input type="text" /><\/div><\/div><\/td><\/tr><tr><td colspan="2"><a href="javascript:;" data-remove-cptr="true">{3}<\/a><\/td><\/tr><\/table><div class="splst-cs-cptr-editor-border-hide"><\/div><\/div>',
        o = '<div class="splst-cs-cptr-tooltip' + (t ? " mac" : "") + '">{0}<b>{1}<\/b><\/div>',
        s = '<div class="splst-cs-cptr-back add"><\/div><div class="splst-cs-cptr-container add"><div class="splst-cs-color-add"><div class="splst-cs-color-add-btn" style="background: url({0});"><\/div><\/div><\/div>',
        h = {
            showFromTo: "Show from {0} to",
            pbColor: "Progress bar color",
            removeColorCondition: "- Remove color condition",
            addColorCondition: "Add color condition at ",
            colorConditionTooltip: "Click here to edit color condition settings"
        },
        c = 3;
    SPLST.ColorScale = function (t) {
        var l = {
            parent: t.parent || document.body,
            defaultColor: t.defaultColor || "#444",
            messages: t.messages || h,
            styles: t.styles,
            colors: t.colors || null,
            imgBaseUrl: t.imgBaseUrl || "",
            enabled: t.enabled !== !1,
            $control: null,
            $colorScale: null,
            colorScaleDimensions: null,
            $add: null,
            $addBack: null,
            lastPosition: null,
            tooltipTimerId: -1,
            $tooltip: null,
            colorPositions: [],
            _hasChanges: !1,
            $disabledCover: null,
            render: function () {
                var r = n(this.parent),
                    t = this.$control = n(i);
                r.append(t);
                this.$colorScale = t.find(".splst-cs-color-scale");
                this.$disabledCover = t.find(".splst-cs-disabled-cover");
                this.enabled || this.$disabledCover.show();
                this.colors || (this.colors = [{
                    value: 1,
                    color: this.defaultColor
                }]);
                t.find(".splst-cs-hover-line").on({
                    mouseover: n.proxy(this.onCSMouseOver, this),
                    mousemove: n.proxy(this.onCSMouseMove, this),
                    mouseleave: n.proxy(this.onCSMouseLeave, this)
                });
                this.renderColors()
            },
            getColors: function () {
                return this.colors
            },
            remove: function () {
                this.$control && this.$control.remove()
            },
            hasChanges: function () {
                return this._hasChanges
            },
            renderColors: function () {
                var o = 0,
                    y = this.colors,
                    p, s, w, v, i, e;
                for (this.colorPositions = [], p = this.colorPositions, s = 0, w = y.length; s < w; s++) {
                    var c = y[s],
                        t = parseFloat(c.value),
                        h = c.color,
                        b = n(f),
                        l = n(c.value === 1 ? u : r.replace("{0}", this.imgBaseUrl + "three-dots.png").replace("{1}", this.messages.colorConditionTooltip)),
                        a = n(l[1]),
                        g = n(l[0]);
                    if (p.push(t), b.css({
                        width: Math.round((t - o) * 100) + "%",
                        left: o * 100 + "%",
                            "background-color": h
                    }), a.css("left", t * 100 + "%"), g.css("left", t * 100 + "%"), this.$colorScale.append(b), this.$colorScale.append(l), v = a.find(".splst-cs-edit"), i = v[0], i) {
                        i.setAttribute("data-prev-val", o);
                        i.setAttribute("data-val", t);
                        i.setAttribute("data-color", h);
                        v.on({
                            click: n.proxy(this.onEditClick, this)
                        })
                    }
                    e = a.find(".splst-cs-cp");
                    e.attr("data-color", h);
                    e.attr("data-val", t);
                    e.click(function (t) {
                        t.stopImmediatePropagation();
                        var i = n(t.currentTarget);
                        if (i.find(".evo-pop").length) i.find('input[type="text"]').colorpicker("hidePalette");
                        else {
                            i.find('input[type="text"]').colorpicker("showPalette");
                            n("body").one({
                                mouseup: function (t) {
                                    n(t.target).parent().attr("class") !== "evo-more" && i.find('input[type="text"]').colorpicker("hidePalette")
                                }
                            })
                        }
                    });
                    var k = e.find("input[type=text]"),
                        nt = k.parent(),
                        d = this;
                    k.colorpicker({
                        displayIndicator: !1,
                        showOn: "none",
                        transparentColor: !1,
                        color: h,
                        renderPaletteToBody: !0
                    }).on("change.color", function (t, i) {
                        var u = n(t.currentTarget),
                            r = u.closest(".splst-cs-cp"),
                            f = r.attr("data-color"),
                            e = parseFloat(r.attr("data-val"));
                        i !== f && (d.changeColor(e, i), d.triggerEvent("change"))
                    });
                    nt.find("div").first().css({
                        width: "20px",
                        padding: "0",
                        margin: "0"
                    });
                    o = t
                }
            },
            initAddControl: function () {
                if (!this.$add) {
                    var t = n(s.replace("{0}", this.imgBaseUrl + "add.png"));
                    this.$colorScale.append(t);
                    this.$add = n(t[1]);
                    this.$addBack = n(t[0]);
                    this.$add.on({
                        mouseover: n.proxy(this.onCSMouseOver, this),
                        mousemove: n.proxy(this.onCSMouseMove, this),
                        mouseleave: n.proxy(this.onCSMouseLeave, this),
                        click: n.proxy(this.onAddClick, this)
                    })
                }
            },
            updateColorScaleDimensions: function () {
                this.colorScaleDimensions || (this.colorScaleDimensions = {
                    width: this.$colorScale.outerWidth()
                });
                var n = this.$colorScale.offset();
                this.colorScaleDimensions.left = n.left;
                this.colorScaleDimensions.top = n.top
            },
            showAddToltip: function () {
                this.hideTooltip();
                var u = this.$add,
                    r = u[0].style.left,
                    t = this.$tooltip = n(o.replace("{0}", this.messages.addColorCondition).replace("{1}", r));
                this.styles && (t[0].style.cssText = this.styles.pbScaleTooltip.style);
                this.updateColorScaleDimensions();
                var i = this.colorScaleDimensions,
                    f = parseInt(r),
                    e = Math.round(i.left + i.width * f / 100),
                    s = i.top;
                t.css({
                    left: e + "px",
                    top: s + "px"
                });
                n(document.body).append(t)
            },
            hideTooltip: function () {
                this.tooltipTimerId !== -1 && window.clearTimeout(this.tooltipTimerId);
                this.tooltipTimerId = -1;
                this.$tooltip && (this.$tooltip.remove(), delete this.$tooltip)
            },
            hideAdd: function (n) {
                this.$add && (this.$add.hide(), this.$addBack.hide(), this.hideTooltip(), n && delete this.lastPosition)
            },
            clearColors: function () {
                var t = n(".splst-cs-color-line, .splst-cs-cptr-back.static, .splst-cs-cptr-back.dynamic, .splst-cs-cptr-container.static, .splst-cs-cptr-container.dynamic");
                t.remove()
            },
            refreshColors: function () {
                this.clearColors();
                this.renderColors()
            },
            addColor: function (n, t) {
                var i, r, u, f;
                if (n = parseFloat(n), t = t || this.defaultColor, i = this.colors, i.length === 1) i.unshift({
                    value: n,
                    color: t
                });
                else
                    for (r = 0, u = i.length; r < u; r++)
                        if (f = i[r].value, f > n) {
                            i.splice(r, 0, {
                                value: n,
                                color: t
                            });
                            break
                        }
                this.refreshColors()
            },
            moveColor: function (n, t, i) {
                var r, u, f;
                n = parseFloat(n);
                t = parseFloat(t);
                r = this.colors;
                r.length === 1 ? (u = r[0], u.value = t, i && (u.color = i), this.refreshColors()) : (f = this.colorPositions.indexOf(n), u = r[f], r.splice(f, 1), this.colorPositions.indexOf(t) !== -1 ? this.changeColor(t, i) : this.addColor(t, i))
            },
            changeColor: function (n, t) {
                (n = parseFloat(n), t) && (this.colors[this.colorPositions.indexOf(n)].color = t, this.refreshColors())
            },
            removeColor: function (n) {
                n = parseFloat(n);
                this.colors.splice(this.colorPositions.indexOf(n), 1);
                this.refreshColors()
            },
            _positionChanged: function (n, t) {
                var r;
                if (this.hideTooltip(), r = this, this.tooltipTimerId = window.setTimeout(function () {
                        r.showAddToltip()
                }, 750), !this.lastPosition || !(Math.abs(n.clientX - this.lastPosition) < c)) {
                    this.$add ? (this.$addBack.show(), this.$add.show()) : this.initAddControl();
                    this.updateColorScaleDimensions();
                    this.lastPosition = n.clientX;
                    var f = this.$add,
                        e = this.$addBack,
                        u = this.colorScaleDimensions,
                        i = Math.round(100 * (n.clientX - u.left) / u.width);
                    if (i < 0 || i > 100 || this.colorPositions.indexOf(i / 100) !== -1) {
                        this.hideAdd(!1);
                        return
                    }
                    if (t) {
                        if (i < 1 || i > 99) return
                    } else i === 0 && (i = 1), i == 100 && (i = 99);
                    f.css("left", i + "%");
                    e.css("left", i + "%")
                }
            },
            onCSMouseOver: function (n) {
                this._positionChanged(n, !1)
            },
            onCSMouseMove: function (n) {
                this._positionChanged(n, !0)
            },
            onCSMouseLeave: function (n) {
                var t = n.toElement || n.relatedTarget;
                t && (t.className.indexOf("splst-cs-color-add") !== -1 || t.className.indexOf("splst-cs-hover-line") !== -1) || this.hideAdd(!0)
            },
            onAddClick: function () {
                this.hideAdd(!0);
                var n = parseFloat(this.$add[0].style.left) / 100;
                this.addColor(n);
                this.triggerEvent("change")
            },
            onEditClick: function (t) {
                var s = t.currentTarget,
                    nt = parseFloat(s.getAttribute("data-prev-val")),
                    u = parseFloat(s.getAttribute("data-val")),
                    p = s.getAttribute("data-color"),
                    h = this.messages,
                    v, d, r, g;
                this.updateColorScaleDimensions();
                var c = this.colorScaleDimensions,
                    l = n(e.replace("{0}", h.showFromTo.replace("{0}", Math.round(nt * 100) + "%")).replace("{1}", h.pbColor).replace("{3}", h.removeColorCondition)),
                    i = n(l[1]),
                    a = n(l[0]),
                    w = Math.round(c.left + c.width * u) + "px",
                    b = c.top,
                    o = i.find(".splst-cs-cptr-editor-input"),
                    k = i.find(".splst-cs-cp");
                this.styles && (i[0].style.cssText = this.styles.pbScaleEditor.style);
                o.val(Math.round(u * 100));
                i.css({
                    left: w,
                    top: b + 1 + "px"
                });
                v = n(document.body);
                v.append(l);
                d = n(s.parentNode.parentNode);
                r = d.clone();
                r.find(".colorPicker").removeClass("colorPicker");
                v.append(r);
                r.addClass("edit-mode");
                r.css({
                    left: w,
                    top: b + "px"
                });
                o.percentspinner({
                    min: 1,
                    max: 99,
                    step: 1,
                    icons: {
                        up: "splst-lb-icon-up",
                        down: "splst-lb-icon-down"
                    },
                    change: function () {
                        var n = o.val();
                        n.indexOf("%") === -1 && o.percentspinner("value", n)
                    }
                });
                k.click(function (t) {
                    t.stopImmediatePropagation();
                    var i = n(t.currentTarget);
                    if (i.find(".evo-pop").length) i.find('input[type="text"]').colorpicker("hidePalette");
                    else {
                        i.find('input[type="text"]').colorpicker("showPalette");
                        n("body").one({
                            mouseup: function (t) {
                                n(t.target).parent().attr("class") !== "evo-more" && i.find('input[type="text"]').colorpicker("hidePalette")
                            }
                        })
                    }
                });
                var y = k.find("input[type=text]"),
                    tt = y.parent(),
                    f = this;
                y.colorpicker({
                    displayIndicator: !1,
                    showOn: "none",
                    transparentColor: !1,
                    color: p,
                    renderPaletteToBody: !0
                });
                tt.find("div").first().css({
                    width: "20px",
                    padding: "0",
                    margin: "0"
                });
                g = i.find('[data-remove-cptr="true"]');
                g.click(function () {
                    f.removeColor(u);
                    a.remove();
                    i.remove();
                    r.remove();
                    f.triggerEvent("change")
                });
                a.click(function () {
                    var t = parseInt(o.val()) / 100,
                        n = y.colorpicker("val");
                    a.remove();
                    i.remove();
                    r.remove();
                    t !== u ? (f.moveColor(u, t, n), f.triggerEvent("change")) : n !== p && (f.changeColor(u, n), f.triggerEvent("change"))
                })
            },
            triggerEvent: function (n, t) {
                a.trigger(n, t)
            },
            setEnabled: function (n) {
                this.enabled !== n && (this.enabled = !!n, this.$disabledCover[this.enabled ? "hide" : "show"]())
            }
        },
            a = n(l);
        return l.on = function () {
            a.on.apply(a, arguments)
        }, l
    }
}
SPLSTColorScale(jQuerySplst || jQuery)